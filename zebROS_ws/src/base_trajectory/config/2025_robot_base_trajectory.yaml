# maximum error for each segment when parameterizing spline arclength (meters)
seg_length_epsilon: .001

# equal-spaced arc length distance sampled from parameterized spline (meters)
dist_between_arc_lengths: 0.035
# error tolerance for above (meters)
dist_between_arc_lengths_epsilon: 0.01

# multiplier to prev distance for picking midpoint of
# next distance searched in arc length subdivision
mid_time_inflation: 1.25

# spacing of waypoints along final generated path (meters)
path_dist_between_arc_lengths: 0.01
# error tolerance for final path waypoint spacing (meters)
path_dist_between_arc_lengths_epsilon: 0.001

# RPROP initial deltaCost value
initial_delta_cost_epsilon: 0.05

# RPROP minimum deltaCost value
min_delta_cost_epsilon: 0.0075

# RPROP initial bestCost value
# Cost improvments of less than this value won't trigger a rerun
# of another loop at the current deltaCostEpsilon value
initial_best_cost_epsilon: 0.02

# RPROP - how many improvements in cost before moving on to the next variable
momentum_counter: 4

# RPROP max consecutive inner loop iterations where change in cost is < delta cost before exiting
max_delta_cost_exit_counter: 3

# RPROP initial optimization value change
initial_dparam: 0.5

# RPROP Number of iterations of consecutive huge costs before 
# moving on to the next variable
optimization_counter_max: 100

# RPROP Cost includes L2 sum of squares of changes in parameters
# from their initial values. This is a multiplier to that
# additional cost to reduce the impact it has relative to
# path drive time cost.
regularization_lambda: 0.0025

# how far robot can diverge from straight-line path between waypoints (meters)
path_distance_limit: 6.0 

# Max robot translational velocity (meters/sec)
max_vel: 4.0

# Maximum robot linear acceleration (meters/sec^2)
max_linear_acc: 9.0

# Maximum robot linear deceleration (meters/sec^2)
max_linear_dec: 9.0

# max centrepital acceleration (meters/sec^2)
max_cent_acc: 4.0

# Robot drivebase radius (meters)
drive_base_radius: 0.426562 # center to corner swerve module

# what frame to generate the path coords in
path_frame_id: "map"

# Load and use a map of field obstacles to avoid
use_obstacle_cost: true

# Constmap costs lower than this are ignored in obstacle gradient calculation
obstacle_cost_threshold: 5

base_trajectory_node:
    costmap:
        footprint:
            - [-0.4572, 0.4572]
            - [-0.4572, -0.4572]
            - [0.4572, -0.4572]
            - [0.4572, 0.4572]
        global_frame: map
        robot_base_frame: base_link
        robot_radius: 0.5 # m
        update_frequency: 1.0
        publish_frequency: 0.5
        transform_tolerance: 10.
        rolling_window: false # use absolute position in static map
        # These should be set when the static layer loads a map
        width: 17.55
        height: 8.050
        resolution: 0.05
        origin_x: 0.0
        origin_y: 0.0

        # Static layer comes from the map topic.  Inflation increases
        # obstacle sizes by robot footprint to detect collisions based
        # on robot size
        plugins:
           - {name: static_layer,    type: "costmap_2d::StaticLayer"}
           - {name: obstacle_layer,  type: "costmap_2d::ObstacleLayer"} # For dynamic obstacle detection
           - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

        inflation_layer:
            enabled:              true
            cost_scaling_factor:  10.0  # exponential rate at which the obstacle cost drops off (default: 10)
            inflation_radius:     0.5  # max. distance from an obstacle at which costs are incurred for planning paths.

        static_layer:
            enabled: true
            map_topic: /path_follower/map

        obstacle_layer:
            enabled: true
            map_topic: /path_follower/map